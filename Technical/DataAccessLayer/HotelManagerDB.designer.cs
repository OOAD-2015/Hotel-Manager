#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Hotelmanager")]
	public partial class HotelManagerDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBILLDETAIL(BILLDETAIL instance);
    partial void UpdateBILLDETAIL(BILLDETAIL instance);
    partial void DeleteBILLDETAIL(BILLDETAIL instance);
    partial void InsertUNIT(UNIT instance);
    partial void UpdateUNIT(UNIT instance);
    partial void DeleteUNIT(UNIT instance);
    partial void InsertCONDITION(CONDITION instance);
    partial void UpdateCONDITION(CONDITION instance);
    partial void DeleteCONDITION(CONDITION instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertORDER(ORDER instance);
    partial void UpdateORDER(ORDER instance);
    partial void DeleteORDER(ORDER instance);
    partial void InsertORDERDETAIL(ORDERDETAIL instance);
    partial void UpdateORDERDETAIL(ORDERDETAIL instance);
    partial void DeleteORDERDETAIL(ORDERDETAIL instance);
    partial void InsertPRICELIST(PRICELIST instance);
    partial void UpdatePRICELIST(PRICELIST instance);
    partial void DeletePRICELIST(PRICELIST instance);
    partial void InsertPRICELISTDETAIL(PRICELISTDETAIL instance);
    partial void UpdatePRICELISTDETAIL(PRICELISTDETAIL instance);
    partial void DeletePRICELISTDETAIL(PRICELISTDETAIL instance);
    partial void InsertROOM(ROOM instance);
    partial void UpdateROOM(ROOM instance);
    partial void DeleteROOM(ROOM instance);
    partial void InsertROOMTYPE(ROOMTYPE instance);
    partial void UpdateROOMTYPE(ROOMTYPE instance);
    partial void DeleteROOMTYPE(ROOMTYPE instance);
    partial void InsertSERVICEDETAIL(SERVICEDETAIL instance);
    partial void UpdateSERVICEDETAIL(SERVICEDETAIL instance);
    partial void DeleteSERVICEDETAIL(SERVICEDETAIL instance);
    partial void InsertSERVICE(SERVICE instance);
    partial void UpdateSERVICE(SERVICE instance);
    partial void DeleteSERVICE(SERVICE instance);
    partial void InsertSERVICESTYPE(SERVICESTYPE instance);
    partial void UpdateSERVICESTYPE(SERVICESTYPE instance);
    partial void DeleteSERVICESTYPE(SERVICESTYPE instance);
    partial void InsertSTAFF(STAFF instance);
    partial void UpdateSTAFF(STAFF instance);
    partial void DeleteSTAFF(STAFF instance);
    partial void InsertSTATUS(STATUS instance);
    partial void UpdateSTATUS(STATUS instance);
    partial void DeleteSTATUS(STATUS instance);
    #endregion
		
		public HotelManagerDBDataContext() : 
				base(global::DataAccessLayer.Properties.Settings.Default.HotelmanagerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HotelManagerDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HotelManagerDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HotelManagerDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HotelManagerDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BILLDETAIL> BILLDETAILs
		{
			get
			{
				return this.GetTable<BILLDETAIL>();
			}
		}
		
		public System.Data.Linq.Table<UNIT> UNITs
		{
			get
			{
				return this.GetTable<UNIT>();
			}
		}
		
		public System.Data.Linq.Table<CONDITION> CONDITIONs
		{
			get
			{
				return this.GetTable<CONDITION>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<ORDER> ORDERs
		{
			get
			{
				return this.GetTable<ORDER>();
			}
		}
		
		public System.Data.Linq.Table<ORDERDETAIL> ORDERDETAILs
		{
			get
			{
				return this.GetTable<ORDERDETAIL>();
			}
		}
		
		public System.Data.Linq.Table<PRICELIST> PRICELISTs
		{
			get
			{
				return this.GetTable<PRICELIST>();
			}
		}
		
		public System.Data.Linq.Table<PRICELISTDETAIL> PRICELISTDETAILs
		{
			get
			{
				return this.GetTable<PRICELISTDETAIL>();
			}
		}
		
		public System.Data.Linq.Table<ROOM> ROOMs
		{
			get
			{
				return this.GetTable<ROOM>();
			}
		}
		
		public System.Data.Linq.Table<ROOMTYPE> ROOMTYPEs
		{
			get
			{
				return this.GetTable<ROOMTYPE>();
			}
		}
		
		public System.Data.Linq.Table<RULE> RULEs
		{
			get
			{
				return this.GetTable<RULE>();
			}
		}
		
		public System.Data.Linq.Table<SERVICEDETAIL> SERVICEDETAILs
		{
			get
			{
				return this.GetTable<SERVICEDETAIL>();
			}
		}
		
		public System.Data.Linq.Table<SERVICE> SERVICEs
		{
			get
			{
				return this.GetTable<SERVICE>();
			}
		}
		
		public System.Data.Linq.Table<SERVICESTYPE> SERVICESTYPEs
		{
			get
			{
				return this.GetTable<SERVICESTYPE>();
			}
		}
		
		public System.Data.Linq.Table<STAFF> STAFFs
		{
			get
			{
				return this.GetTable<STAFF>();
			}
		}
		
		public System.Data.Linq.Table<STATUS> STATUS
		{
			get
			{
				return this.GetTable<STATUS>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BILLDETAIL")]
	public partial class BILLDETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BillID;
		
		private string _OrderID;
		
		private System.Nullable<System.DateTime> _BillDate;
		
		private string _StaffID;
		
		private System.Nullable<int> _Total;
		
		private EntityRef<ORDER> _ORDER;
		
		private EntityRef<STAFF> _STAFF;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillIDChanging(string value);
    partial void OnBillIDChanged();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnBillDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBillDateChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnTotalChanging(System.Nullable<int> value);
    partial void OnTotalChanged();
    #endregion
		
		public BILLDETAIL()
		{
			this._ORDER = default(EntityRef<ORDER>);
			this._STAFF = default(EntityRef<STAFF>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BillID
		{
			get
			{
				return this._BillID;
			}
			set
			{
				if ((this._BillID != value))
				{
					this.OnBillIDChanging(value);
					this.SendPropertyChanging();
					this._BillID = value;
					this.SendPropertyChanged("BillID");
					this.OnBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="NChar(10)")]
		public string OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._ORDER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillDate", DbType="Date")]
		public System.Nullable<System.DateTime> BillDate
		{
			get
			{
				return this._BillDate;
			}
			set
			{
				if ((this._BillDate != value))
				{
					this.OnBillDateChanging(value);
					this.SendPropertyChanging();
					this._BillDate = value;
					this.SendPropertyChanged("BillDate");
					this.OnBillDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="NChar(10)")]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._STAFF.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_BILLDETAIL", Storage="_ORDER", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public ORDER ORDER
		{
			get
			{
				return this._ORDER.Entity;
			}
			set
			{
				ORDER previousValue = this._ORDER.Entity;
				if (((previousValue != value) 
							|| (this._ORDER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ORDER.Entity = null;
						previousValue.BILLDETAILs.Remove(this);
					}
					this._ORDER.Entity = value;
					if ((value != null))
					{
						value.BILLDETAILs.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(string);
					}
					this.SendPropertyChanged("ORDER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_BILLDETAIL", Storage="_STAFF", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public STAFF STAFF
		{
			get
			{
				return this._STAFF.Entity;
			}
			set
			{
				STAFF previousValue = this._STAFF.Entity;
				if (((previousValue != value) 
							|| (this._STAFF.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STAFF.Entity = null;
						previousValue.BILLDETAILs.Remove(this);
					}
					this._STAFF.Entity = value;
					if ((value != null))
					{
						value.BILLDETAILs.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("STAFF");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UNIT")]
	public partial class UNIT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UnitID;
		
		private string _UnitName;
		
		private EntitySet<SERVICE> _SERVICEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitIDChanging(string value);
    partial void OnUnitIDChanged();
    partial void OnUnitNameChanging(string value);
    partial void OnUnitNameChanged();
    #endregion
		
		public UNIT()
		{
			this._SERVICEs = new EntitySet<SERVICE>(new Action<SERVICE>(this.attach_SERVICEs), new Action<SERVICE>(this.detach_SERVICEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitName", DbType="NVarChar(50)")]
		public string UnitName
		{
			get
			{
				return this._UnitName;
			}
			set
			{
				if ((this._UnitName != value))
				{
					this.OnUnitNameChanging(value);
					this.SendPropertyChanging();
					this._UnitName = value;
					this.SendPropertyChanged("UnitName");
					this.OnUnitNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UNIT_SERVICE", Storage="_SERVICEs", ThisKey="UnitID", OtherKey="UnitID")]
		public EntitySet<SERVICE> SERVICEs
		{
			get
			{
				return this._SERVICEs;
			}
			set
			{
				this._SERVICEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SERVICEs(SERVICE entity)
		{
			this.SendPropertyChanging();
			entity.UNIT = this;
		}
		
		private void detach_SERVICEs(SERVICE entity)
		{
			this.SendPropertyChanging();
			entity.UNIT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CONDITIONS")]
	public partial class CONDITION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ConditionsID;
		
		private string _ConditionsName;
		
		private string _ActionName;
		
		private System.Nullable<int> _ActionValue;
		
		private System.Nullable<bool> _ChargeByTheHour;
		
		private System.Nullable<double> _HourMin;
		
		private System.Nullable<double> _HourMax;
		
		private System.Nullable<double> _HourLate;
		
		private EntitySet<PRICELISTDETAIL> _PRICELISTDETAILs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConditionsIDChanging(string value);
    partial void OnConditionsIDChanged();
    partial void OnConditionsNameChanging(string value);
    partial void OnConditionsNameChanged();
    partial void OnActionNameChanging(string value);
    partial void OnActionNameChanged();
    partial void OnActionValueChanging(System.Nullable<int> value);
    partial void OnActionValueChanged();
    partial void OnChargeByTheHourChanging(System.Nullable<bool> value);
    partial void OnChargeByTheHourChanged();
    partial void OnHourMinChanging(System.Nullable<double> value);
    partial void OnHourMinChanged();
    partial void OnHourMaxChanging(System.Nullable<double> value);
    partial void OnHourMaxChanged();
    partial void OnHourLateChanging(System.Nullable<double> value);
    partial void OnHourLateChanged();
    #endregion
		
		public CONDITION()
		{
			this._PRICELISTDETAILs = new EntitySet<PRICELISTDETAIL>(new Action<PRICELISTDETAIL>(this.attach_PRICELISTDETAILs), new Action<PRICELISTDETAIL>(this.detach_PRICELISTDETAILs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionsID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConditionsID
		{
			get
			{
				return this._ConditionsID;
			}
			set
			{
				if ((this._ConditionsID != value))
				{
					this.OnConditionsIDChanging(value);
					this.SendPropertyChanging();
					this._ConditionsID = value;
					this.SendPropertyChanged("ConditionsID");
					this.OnConditionsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionsName", DbType="NVarChar(100)")]
		public string ConditionsName
		{
			get
			{
				return this._ConditionsName;
			}
			set
			{
				if ((this._ConditionsName != value))
				{
					this.OnConditionsNameChanging(value);
					this.SendPropertyChanging();
					this._ConditionsName = value;
					this.SendPropertyChanged("ConditionsName");
					this.OnConditionsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionName", DbType="NVarChar(100)")]
		public string ActionName
		{
			get
			{
				return this._ActionName;
			}
			set
			{
				if ((this._ActionName != value))
				{
					this.OnActionNameChanging(value);
					this.SendPropertyChanging();
					this._ActionName = value;
					this.SendPropertyChanged("ActionName");
					this.OnActionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionValue", DbType="Int")]
		public System.Nullable<int> ActionValue
		{
			get
			{
				return this._ActionValue;
			}
			set
			{
				if ((this._ActionValue != value))
				{
					this.OnActionValueChanging(value);
					this.SendPropertyChanging();
					this._ActionValue = value;
					this.SendPropertyChanged("ActionValue");
					this.OnActionValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChargeByTheHour", DbType="Bit")]
		public System.Nullable<bool> ChargeByTheHour
		{
			get
			{
				return this._ChargeByTheHour;
			}
			set
			{
				if ((this._ChargeByTheHour != value))
				{
					this.OnChargeByTheHourChanging(value);
					this.SendPropertyChanging();
					this._ChargeByTheHour = value;
					this.SendPropertyChanged("ChargeByTheHour");
					this.OnChargeByTheHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourMin", DbType="Float")]
		public System.Nullable<double> HourMin
		{
			get
			{
				return this._HourMin;
			}
			set
			{
				if ((this._HourMin != value))
				{
					this.OnHourMinChanging(value);
					this.SendPropertyChanging();
					this._HourMin = value;
					this.SendPropertyChanged("HourMin");
					this.OnHourMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourMax", DbType="Float")]
		public System.Nullable<double> HourMax
		{
			get
			{
				return this._HourMax;
			}
			set
			{
				if ((this._HourMax != value))
				{
					this.OnHourMaxChanging(value);
					this.SendPropertyChanging();
					this._HourMax = value;
					this.SendPropertyChanged("HourMax");
					this.OnHourMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourLate", DbType="Float")]
		public System.Nullable<double> HourLate
		{
			get
			{
				return this._HourLate;
			}
			set
			{
				if ((this._HourLate != value))
				{
					this.OnHourLateChanging(value);
					this.SendPropertyChanging();
					this._HourLate = value;
					this.SendPropertyChanged("HourLate");
					this.OnHourLateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CONDITION_PRICELISTDETAIL", Storage="_PRICELISTDETAILs", ThisKey="ConditionsID", OtherKey="ConditionID")]
		public EntitySet<PRICELISTDETAIL> PRICELISTDETAILs
		{
			get
			{
				return this._PRICELISTDETAILs;
			}
			set
			{
				this._PRICELISTDETAILs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PRICELISTDETAILs(PRICELISTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.CONDITION = this;
		}
		
		private void detach_PRICELISTDETAILs(PRICELISTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.CONDITION = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMER")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CustomerID;
		
		private string _CustomerName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _Gender;
		
		private string _IDNumber;
		
		private string _PhoneNumber;
		
		private string _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(string value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnIDNumberChanging(string value);
    partial void OnIDNumberChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public CUSTOMER()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(50)")]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNumber", DbType="NChar(10)")]
		public string IDNumber
		{
			get
			{
				return this._IDNumber;
			}
			set
			{
				if ((this._IDNumber != value))
				{
					this.OnIDNumberChanging(value);
					this.SendPropertyChanging();
					this._IDNumber = value;
					this.SendPropertyChanged("IDNumber");
					this.OnIDNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NChar(11)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[ORDER]")]
	public partial class ORDER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OrderID;
		
		private string _CustomerID;
		
		private string _StaffID;
		
		private System.Nullable<int> _Estimate;
		
		private System.Nullable<int> _Deposit;
		
		private System.Nullable<int> _Total;
		
		private EntitySet<BILLDETAIL> _BILLDETAILs;
		
		private EntitySet<ORDERDETAIL> _ORDERDETAILs;
		
		private EntityRef<STAFF> _STAFF;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnCustomerIDChanging(string value);
    partial void OnCustomerIDChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnEstimateChanging(System.Nullable<int> value);
    partial void OnEstimateChanged();
    partial void OnDepositChanging(System.Nullable<int> value);
    partial void OnDepositChanged();
    partial void OnTotalChanging(System.Nullable<int> value);
    partial void OnTotalChanged();
    #endregion
		
		public ORDER()
		{
			this._BILLDETAILs = new EntitySet<BILLDETAIL>(new Action<BILLDETAIL>(this.attach_BILLDETAILs), new Action<BILLDETAIL>(this.detach_BILLDETAILs));
			this._ORDERDETAILs = new EntitySet<ORDERDETAIL>(new Action<ORDERDETAIL>(this.attach_ORDERDETAILs), new Action<ORDERDETAIL>(this.detach_ORDERDETAILs));
			this._STAFF = default(EntityRef<STAFF>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="NChar(10)")]
		public string CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="NChar(10)")]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._STAFF.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Estimate", DbType="Int")]
		public System.Nullable<int> Estimate
		{
			get
			{
				return this._Estimate;
			}
			set
			{
				if ((this._Estimate != value))
				{
					this.OnEstimateChanging(value);
					this.SendPropertyChanging();
					this._Estimate = value;
					this.SendPropertyChanged("Estimate");
					this.OnEstimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deposit", DbType="Int")]
		public System.Nullable<int> Deposit
		{
			get
			{
				return this._Deposit;
			}
			set
			{
				if ((this._Deposit != value))
				{
					this.OnDepositChanging(value);
					this.SendPropertyChanging();
					this._Deposit = value;
					this.SendPropertyChanged("Deposit");
					this.OnDepositChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_BILLDETAIL", Storage="_BILLDETAILs", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<BILLDETAIL> BILLDETAILs
		{
			get
			{
				return this._BILLDETAILs;
			}
			set
			{
				this._BILLDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_ORDERDETAIL", Storage="_ORDERDETAILs", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<ORDERDETAIL> ORDERDETAILs
		{
			get
			{
				return this._ORDERDETAILs;
			}
			set
			{
				this._ORDERDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_ORDER", Storage="_STAFF", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public STAFF STAFF
		{
			get
			{
				return this._STAFF.Entity;
			}
			set
			{
				STAFF previousValue = this._STAFF.Entity;
				if (((previousValue != value) 
							|| (this._STAFF.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STAFF.Entity = null;
						previousValue.ORDERs.Remove(this);
					}
					this._STAFF.Entity = value;
					if ((value != null))
					{
						value.ORDERs.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("STAFF");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BILLDETAILs(BILLDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ORDER = this;
		}
		
		private void detach_BILLDETAILs(BILLDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ORDER = null;
		}
		
		private void attach_ORDERDETAILs(ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ORDER = this;
		}
		
		private void detach_ORDERDETAILs(ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ORDER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ORDERDETAIL")]
	public partial class ORDERDETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OrderDetailID;
		
		private string _OrderID;
		
		private string _RoomID;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<System.DateTime> _Estimate;
		
		private System.Nullable<bool> _OrderStatus;
		
		private EntitySet<SERVICEDETAIL> _SERVICEDETAILs;
		
		private EntityRef<ORDER> _ORDER;
		
		private EntityRef<ROOM> _ROOM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDetailIDChanging(string value);
    partial void OnOrderDetailIDChanged();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnRoomIDChanging(string value);
    partial void OnRoomIDChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnEstimateChanging(System.Nullable<System.DateTime> value);
    partial void OnEstimateChanged();
    partial void OnOrderStatusChanging(System.Nullable<bool> value);
    partial void OnOrderStatusChanged();
    #endregion
		
		public ORDERDETAIL()
		{
			this._SERVICEDETAILs = new EntitySet<SERVICEDETAIL>(new Action<SERVICEDETAIL>(this.attach_SERVICEDETAILs), new Action<SERVICEDETAIL>(this.detach_SERVICEDETAILs));
			this._ORDER = default(EntityRef<ORDER>);
			this._ROOM = default(EntityRef<ROOM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDetailID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OrderDetailID
		{
			get
			{
				return this._OrderDetailID;
			}
			set
			{
				if ((this._OrderDetailID != value))
				{
					this.OnOrderDetailIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailID = value;
					this.SendPropertyChanged("OrderDetailID");
					this.OnOrderDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="NChar(10)")]
		public string OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._ORDER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="NChar(10)")]
		public string RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._ROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Estimate", DbType="Date")]
		public System.Nullable<System.DateTime> Estimate
		{
			get
			{
				return this._Estimate;
			}
			set
			{
				if ((this._Estimate != value))
				{
					this.OnEstimateChanging(value);
					this.SendPropertyChanging();
					this._Estimate = value;
					this.SendPropertyChanged("Estimate");
					this.OnEstimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatus", DbType="Bit")]
		public System.Nullable<bool> OrderStatus
		{
			get
			{
				return this._OrderStatus;
			}
			set
			{
				if ((this._OrderStatus != value))
				{
					this.OnOrderStatusChanging(value);
					this.SendPropertyChanging();
					this._OrderStatus = value;
					this.SendPropertyChanged("OrderStatus");
					this.OnOrderStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDERDETAIL_SERVICEDETAIL", Storage="_SERVICEDETAILs", ThisKey="OrderDetailID", OtherKey="OrderDetailID")]
		public EntitySet<SERVICEDETAIL> SERVICEDETAILs
		{
			get
			{
				return this._SERVICEDETAILs;
			}
			set
			{
				this._SERVICEDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_ORDERDETAIL", Storage="_ORDER", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public ORDER ORDER
		{
			get
			{
				return this._ORDER.Entity;
			}
			set
			{
				ORDER previousValue = this._ORDER.Entity;
				if (((previousValue != value) 
							|| (this._ORDER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ORDER.Entity = null;
						previousValue.ORDERDETAILs.Remove(this);
					}
					this._ORDER.Entity = value;
					if ((value != null))
					{
						value.ORDERDETAILs.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(string);
					}
					this.SendPropertyChanged("ORDER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_ORDERDETAIL", Storage="_ROOM", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public ROOM ROOM
		{
			get
			{
				return this._ROOM.Entity;
			}
			set
			{
				ROOM previousValue = this._ROOM.Entity;
				if (((previousValue != value) 
							|| (this._ROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROOM.Entity = null;
						previousValue.ORDERDETAILs.Remove(this);
					}
					this._ROOM.Entity = value;
					if ((value != null))
					{
						value.ORDERDETAILs.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(string);
					}
					this.SendPropertyChanged("ROOM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SERVICEDETAILs(SERVICEDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ORDERDETAIL = this;
		}
		
		private void detach_SERVICEDETAILs(SERVICEDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ORDERDETAIL = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRICELIST")]
	public partial class PRICELIST : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PriceListID;
		
		private string _PriceListName;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<System.DateTime> _PriceListDate;
		
		private string _StaffID;
		
		private string _Description;
		
		private EntitySet<PRICELISTDETAIL> _PRICELISTDETAILs;
		
		private EntityRef<STAFF> _STAFF;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceListIDChanging(string value);
    partial void OnPriceListIDChanged();
    partial void OnPriceListNameChanging(string value);
    partial void OnPriceListNameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnPriceListDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPriceListDateChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PRICELIST()
		{
			this._PRICELISTDETAILs = new EntitySet<PRICELISTDETAIL>(new Action<PRICELISTDETAIL>(this.attach_PRICELISTDETAILs), new Action<PRICELISTDETAIL>(this.detach_PRICELISTDETAILs));
			this._STAFF = default(EntityRef<STAFF>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceListID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PriceListID
		{
			get
			{
				return this._PriceListID;
			}
			set
			{
				if ((this._PriceListID != value))
				{
					this.OnPriceListIDChanging(value);
					this.SendPropertyChanging();
					this._PriceListID = value;
					this.SendPropertyChanged("PriceListID");
					this.OnPriceListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceListName", DbType="NVarChar(100)")]
		public string PriceListName
		{
			get
			{
				return this._PriceListName;
			}
			set
			{
				if ((this._PriceListName != value))
				{
					this.OnPriceListNameChanging(value);
					this.SendPropertyChanging();
					this._PriceListName = value;
					this.SendPropertyChanged("PriceListName");
					this.OnPriceListNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceListDate", DbType="Date")]
		public System.Nullable<System.DateTime> PriceListDate
		{
			get
			{
				return this._PriceListDate;
			}
			set
			{
				if ((this._PriceListDate != value))
				{
					this.OnPriceListDateChanging(value);
					this.SendPropertyChanging();
					this._PriceListDate = value;
					this.SendPropertyChanged("PriceListDate");
					this.OnPriceListDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="NChar(10)")]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._STAFF.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRICELIST_PRICELISTDETAIL", Storage="_PRICELISTDETAILs", ThisKey="PriceListID", OtherKey="PriceListID")]
		public EntitySet<PRICELISTDETAIL> PRICELISTDETAILs
		{
			get
			{
				return this._PRICELISTDETAILs;
			}
			set
			{
				this._PRICELISTDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_PRICELIST", Storage="_STAFF", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public STAFF STAFF
		{
			get
			{
				return this._STAFF.Entity;
			}
			set
			{
				STAFF previousValue = this._STAFF.Entity;
				if (((previousValue != value) 
							|| (this._STAFF.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STAFF.Entity = null;
						previousValue.PRICELISTs.Remove(this);
					}
					this._STAFF.Entity = value;
					if ((value != null))
					{
						value.PRICELISTs.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("STAFF");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PRICELISTDETAILs(PRICELISTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.PRICELIST = this;
		}
		
		private void detach_PRICELISTDETAILs(PRICELISTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.PRICELIST = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PRICELISTDETAIL")]
	public partial class PRICELISTDETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PriceListID;
		
		private string _RoomTypeID;
		
		private string _ConditionID;
		
		private System.Nullable<int> _Price;
		
		private EntityRef<CONDITION> _CONDITION;
		
		private EntityRef<PRICELIST> _PRICELIST;
		
		private EntityRef<ROOMTYPE> _ROOMTYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceListIDChanging(string value);
    partial void OnPriceListIDChanged();
    partial void OnRoomTypeIDChanging(string value);
    partial void OnRoomTypeIDChanged();
    partial void OnConditionIDChanging(string value);
    partial void OnConditionIDChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    #endregion
		
		public PRICELISTDETAIL()
		{
			this._CONDITION = default(EntityRef<CONDITION>);
			this._PRICELIST = default(EntityRef<PRICELIST>);
			this._ROOMTYPE = default(EntityRef<ROOMTYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceListID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PriceListID
		{
			get
			{
				return this._PriceListID;
			}
			set
			{
				if ((this._PriceListID != value))
				{
					if (this._PRICELIST.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriceListIDChanging(value);
					this.SendPropertyChanging();
					this._PriceListID = value;
					this.SendPropertyChanged("PriceListID");
					this.OnPriceListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					if (this._ROOMTYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConditionID
		{
			get
			{
				return this._ConditionID;
			}
			set
			{
				if ((this._ConditionID != value))
				{
					if (this._CONDITION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConditionIDChanging(value);
					this.SendPropertyChanging();
					this._ConditionID = value;
					this.SendPropertyChanged("ConditionID");
					this.OnConditionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CONDITION_PRICELISTDETAIL", Storage="_CONDITION", ThisKey="ConditionID", OtherKey="ConditionsID", IsForeignKey=true)]
		public CONDITION CONDITION
		{
			get
			{
				return this._CONDITION.Entity;
			}
			set
			{
				CONDITION previousValue = this._CONDITION.Entity;
				if (((previousValue != value) 
							|| (this._CONDITION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CONDITION.Entity = null;
						previousValue.PRICELISTDETAILs.Remove(this);
					}
					this._CONDITION.Entity = value;
					if ((value != null))
					{
						value.PRICELISTDETAILs.Add(this);
						this._ConditionID = value.ConditionsID;
					}
					else
					{
						this._ConditionID = default(string);
					}
					this.SendPropertyChanged("CONDITION");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PRICELIST_PRICELISTDETAIL", Storage="_PRICELIST", ThisKey="PriceListID", OtherKey="PriceListID", IsForeignKey=true)]
		public PRICELIST PRICELIST
		{
			get
			{
				return this._PRICELIST.Entity;
			}
			set
			{
				PRICELIST previousValue = this._PRICELIST.Entity;
				if (((previousValue != value) 
							|| (this._PRICELIST.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PRICELIST.Entity = null;
						previousValue.PRICELISTDETAILs.Remove(this);
					}
					this._PRICELIST.Entity = value;
					if ((value != null))
					{
						value.PRICELISTDETAILs.Add(this);
						this._PriceListID = value.PriceListID;
					}
					else
					{
						this._PriceListID = default(string);
					}
					this.SendPropertyChanged("PRICELIST");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOMTYPE_PRICELISTDETAIL", Storage="_ROOMTYPE", ThisKey="RoomTypeID", OtherKey="RoomTypeID", IsForeignKey=true)]
		public ROOMTYPE ROOMTYPE
		{
			get
			{
				return this._ROOMTYPE.Entity;
			}
			set
			{
				ROOMTYPE previousValue = this._ROOMTYPE.Entity;
				if (((previousValue != value) 
							|| (this._ROOMTYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROOMTYPE.Entity = null;
						previousValue.PRICELISTDETAILs.Remove(this);
					}
					this._ROOMTYPE.Entity = value;
					if ((value != null))
					{
						value.PRICELISTDETAILs.Add(this);
						this._RoomTypeID = value.RoomTypeID;
					}
					else
					{
						this._RoomTypeID = default(string);
					}
					this.SendPropertyChanged("ROOMTYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROOM")]
	public partial class ROOM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RoomID;
		
		private string _RoomName;
		
		private string _RoomTypeID;
		
		private System.Nullable<int> _NumberOfBeds;
		
		private string _Description;
		
		private string _StatusID;
		
		private EntitySet<ORDERDETAIL> _ORDERDETAILs;
		
		private EntityRef<ROOMTYPE> _ROOMTYPE;
		
		private EntityRef<STATUS> _STATUS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(string value);
    partial void OnRoomIDChanged();
    partial void OnRoomNameChanging(string value);
    partial void OnRoomNameChanged();
    partial void OnRoomTypeIDChanging(string value);
    partial void OnRoomTypeIDChanged();
    partial void OnNumberOfBedsChanging(System.Nullable<int> value);
    partial void OnNumberOfBedsChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusIDChanging(string value);
    partial void OnStatusIDChanged();
    #endregion
		
		public ROOM()
		{
			this._ORDERDETAILs = new EntitySet<ORDERDETAIL>(new Action<ORDERDETAIL>(this.attach_ORDERDETAILs), new Action<ORDERDETAIL>(this.detach_ORDERDETAILs));
			this._ROOMTYPE = default(EntityRef<ROOMTYPE>);
			this._STATUS = default(EntityRef<STATUS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomName", DbType="NVarChar(50)")]
		public string RoomName
		{
			get
			{
				return this._RoomName;
			}
			set
			{
				if ((this._RoomName != value))
				{
					this.OnRoomNameChanging(value);
					this.SendPropertyChanging();
					this._RoomName = value;
					this.SendPropertyChanged("RoomName");
					this.OnRoomNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", DbType="NChar(10)")]
		public string RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					if (this._ROOMTYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfBeds", DbType="Int")]
		public System.Nullable<int> NumberOfBeds
		{
			get
			{
				return this._NumberOfBeds;
			}
			set
			{
				if ((this._NumberOfBeds != value))
				{
					this.OnNumberOfBedsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfBeds = value;
					this.SendPropertyChanged("NumberOfBeds");
					this.OnNumberOfBedsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="NChar(10)")]
		public string StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._STATUS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_ORDERDETAIL", Storage="_ORDERDETAILs", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<ORDERDETAIL> ORDERDETAILs
		{
			get
			{
				return this._ORDERDETAILs;
			}
			set
			{
				this._ORDERDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOMTYPE_ROOM", Storage="_ROOMTYPE", ThisKey="RoomTypeID", OtherKey="RoomTypeID", IsForeignKey=true)]
		public ROOMTYPE ROOMTYPE
		{
			get
			{
				return this._ROOMTYPE.Entity;
			}
			set
			{
				ROOMTYPE previousValue = this._ROOMTYPE.Entity;
				if (((previousValue != value) 
							|| (this._ROOMTYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROOMTYPE.Entity = null;
						previousValue.ROOMs.Remove(this);
					}
					this._ROOMTYPE.Entity = value;
					if ((value != null))
					{
						value.ROOMs.Add(this);
						this._RoomTypeID = value.RoomTypeID;
					}
					else
					{
						this._RoomTypeID = default(string);
					}
					this.SendPropertyChanged("ROOMTYPE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATUS_ROOM", Storage="_STATUS", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public STATUS STATUS
		{
			get
			{
				return this._STATUS.Entity;
			}
			set
			{
				STATUS previousValue = this._STATUS.Entity;
				if (((previousValue != value) 
							|| (this._STATUS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STATUS.Entity = null;
						previousValue.ROOMs.Remove(this);
					}
					this._STATUS.Entity = value;
					if ((value != null))
					{
						value.ROOMs.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(string);
					}
					this.SendPropertyChanged("STATUS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDERDETAILs(ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = this;
		}
		
		private void detach_ORDERDETAILs(ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROOMTYPE")]
	public partial class ROOMTYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RoomTypeID;
		
		private string _RoomTypeName;
		
		private System.Nullable<int> _Price;
		
		private EntitySet<PRICELISTDETAIL> _PRICELISTDETAILs;
		
		private EntitySet<ROOM> _ROOMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomTypeIDChanging(string value);
    partial void OnRoomTypeIDChanged();
    partial void OnRoomTypeNameChanging(string value);
    partial void OnRoomTypeNameChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    #endregion
		
		public ROOMTYPE()
		{
			this._PRICELISTDETAILs = new EntitySet<PRICELISTDETAIL>(new Action<PRICELISTDETAIL>(this.attach_PRICELISTDETAILs), new Action<PRICELISTDETAIL>(this.detach_PRICELISTDETAILs));
			this._ROOMs = new EntitySet<ROOM>(new Action<ROOM>(this.attach_ROOMs), new Action<ROOM>(this.detach_ROOMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeName", DbType="NVarChar(50)")]
		public string RoomTypeName
		{
			get
			{
				return this._RoomTypeName;
			}
			set
			{
				if ((this._RoomTypeName != value))
				{
					this.OnRoomTypeNameChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeName = value;
					this.SendPropertyChanged("RoomTypeName");
					this.OnRoomTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOMTYPE_PRICELISTDETAIL", Storage="_PRICELISTDETAILs", ThisKey="RoomTypeID", OtherKey="RoomTypeID")]
		public EntitySet<PRICELISTDETAIL> PRICELISTDETAILs
		{
			get
			{
				return this._PRICELISTDETAILs;
			}
			set
			{
				this._PRICELISTDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOMTYPE_ROOM", Storage="_ROOMs", ThisKey="RoomTypeID", OtherKey="RoomTypeID")]
		public EntitySet<ROOM> ROOMs
		{
			get
			{
				return this._ROOMs;
			}
			set
			{
				this._ROOMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PRICELISTDETAILs(PRICELISTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ROOMTYPE = this;
		}
		
		private void detach_PRICELISTDETAILs(PRICELISTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ROOMTYPE = null;
		}
		
		private void attach_ROOMs(ROOM entity)
		{
			this.SendPropertyChanging();
			entity.ROOMTYPE = this;
		}
		
		private void detach_ROOMs(ROOM entity)
		{
			this.SendPropertyChanging();
			entity.ROOMTYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[RULE]")]
	public partial class RULE
	{
		
		private System.Nullable<int> _StaffAgeMin;
		
		private string _StaffAgeMax;
		
		public RULE()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffAgeMin", DbType="Int")]
		public System.Nullable<int> StaffAgeMin
		{
			get
			{
				return this._StaffAgeMin;
			}
			set
			{
				if ((this._StaffAgeMin != value))
				{
					this._StaffAgeMin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffAgeMax", DbType="NChar(10)")]
		public string StaffAgeMax
		{
			get
			{
				return this._StaffAgeMax;
			}
			set
			{
				if ((this._StaffAgeMax != value))
				{
					this._StaffAgeMax = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SERVICEDETAIL")]
	public partial class SERVICEDETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SevicesDetailID;
		
		private string _OrderDetailID;
		
		private string _ServicesID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _Monetized;
		
		private EntityRef<ORDERDETAIL> _ORDERDETAIL;
		
		private EntityRef<SERVICE> _SERVICE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSevicesDetailIDChanging(string value);
    partial void OnSevicesDetailIDChanged();
    partial void OnOrderDetailIDChanging(string value);
    partial void OnOrderDetailIDChanged();
    partial void OnServicesIDChanging(string value);
    partial void OnServicesIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnMonetizedChanging(System.Nullable<int> value);
    partial void OnMonetizedChanged();
    #endregion
		
		public SERVICEDETAIL()
		{
			this._ORDERDETAIL = default(EntityRef<ORDERDETAIL>);
			this._SERVICE = default(EntityRef<SERVICE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SevicesDetailID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SevicesDetailID
		{
			get
			{
				return this._SevicesDetailID;
			}
			set
			{
				if ((this._SevicesDetailID != value))
				{
					this.OnSevicesDetailIDChanging(value);
					this.SendPropertyChanging();
					this._SevicesDetailID = value;
					this.SendPropertyChanged("SevicesDetailID");
					this.OnSevicesDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDetailID", DbType="NChar(10)")]
		public string OrderDetailID
		{
			get
			{
				return this._OrderDetailID;
			}
			set
			{
				if ((this._OrderDetailID != value))
				{
					if (this._ORDERDETAIL.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderDetailIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailID = value;
					this.SendPropertyChanged("OrderDetailID");
					this.OnOrderDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicesID", DbType="NChar(10)")]
		public string ServicesID
		{
			get
			{
				return this._ServicesID;
			}
			set
			{
				if ((this._ServicesID != value))
				{
					if (this._SERVICE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServicesIDChanging(value);
					this.SendPropertyChanging();
					this._ServicesID = value;
					this.SendPropertyChanged("ServicesID");
					this.OnServicesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Monetized", DbType="Int")]
		public System.Nullable<int> Monetized
		{
			get
			{
				return this._Monetized;
			}
			set
			{
				if ((this._Monetized != value))
				{
					this.OnMonetizedChanging(value);
					this.SendPropertyChanging();
					this._Monetized = value;
					this.SendPropertyChanged("Monetized");
					this.OnMonetizedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDERDETAIL_SERVICEDETAIL", Storage="_ORDERDETAIL", ThisKey="OrderDetailID", OtherKey="OrderDetailID", IsForeignKey=true)]
		public ORDERDETAIL ORDERDETAIL
		{
			get
			{
				return this._ORDERDETAIL.Entity;
			}
			set
			{
				ORDERDETAIL previousValue = this._ORDERDETAIL.Entity;
				if (((previousValue != value) 
							|| (this._ORDERDETAIL.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ORDERDETAIL.Entity = null;
						previousValue.SERVICEDETAILs.Remove(this);
					}
					this._ORDERDETAIL.Entity = value;
					if ((value != null))
					{
						value.SERVICEDETAILs.Add(this);
						this._OrderDetailID = value.OrderDetailID;
					}
					else
					{
						this._OrderDetailID = default(string);
					}
					this.SendPropertyChanged("ORDERDETAIL");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICE_SERVICEDETAIL", Storage="_SERVICE", ThisKey="ServicesID", OtherKey="ServicesID", IsForeignKey=true)]
		public SERVICE SERVICE
		{
			get
			{
				return this._SERVICE.Entity;
			}
			set
			{
				SERVICE previousValue = this._SERVICE.Entity;
				if (((previousValue != value) 
							|| (this._SERVICE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SERVICE.Entity = null;
						previousValue.SERVICEDETAILs.Remove(this);
					}
					this._SERVICE.Entity = value;
					if ((value != null))
					{
						value.SERVICEDETAILs.Add(this);
						this._ServicesID = value.ServicesID;
					}
					else
					{
						this._ServicesID = default(string);
					}
					this.SendPropertyChanged("SERVICE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SERVICES")]
	public partial class SERVICE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ServicesTypeID;
		
		private string _ServicesID;
		
		private string _ServicesName;
		
		private string _UnitID;
		
		private System.Nullable<int> _Price;
		
		private EntitySet<SERVICEDETAIL> _SERVICEDETAILs;
		
		private EntityRef<UNIT> _UNIT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServicesTypeIDChanging(string value);
    partial void OnServicesTypeIDChanged();
    partial void OnServicesIDChanging(string value);
    partial void OnServicesIDChanged();
    partial void OnServicesNameChanging(string value);
    partial void OnServicesNameChanged();
    partial void OnUnitIDChanging(string value);
    partial void OnUnitIDChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    #endregion
		
		public SERVICE()
		{
			this._SERVICEDETAILs = new EntitySet<SERVICEDETAIL>(new Action<SERVICEDETAIL>(this.attach_SERVICEDETAILs), new Action<SERVICEDETAIL>(this.detach_SERVICEDETAILs));
			this._UNIT = default(EntityRef<UNIT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicesTypeID", DbType="NChar(10)")]
		public string ServicesTypeID
		{
			get
			{
				return this._ServicesTypeID;
			}
			set
			{
				if ((this._ServicesTypeID != value))
				{
					this.OnServicesTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServicesTypeID = value;
					this.SendPropertyChanged("ServicesTypeID");
					this.OnServicesTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicesID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ServicesID
		{
			get
			{
				return this._ServicesID;
			}
			set
			{
				if ((this._ServicesID != value))
				{
					this.OnServicesIDChanging(value);
					this.SendPropertyChanging();
					this._ServicesID = value;
					this.SendPropertyChanged("ServicesID");
					this.OnServicesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicesName", DbType="NVarChar(100)")]
		public string ServicesName
		{
			get
			{
				return this._ServicesName;
			}
			set
			{
				if ((this._ServicesName != value))
				{
					this.OnServicesNameChanging(value);
					this.SendPropertyChanging();
					this._ServicesName = value;
					this.SendPropertyChanged("ServicesName");
					this.OnServicesNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="NChar(10)")]
		public string UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._UNIT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICE_SERVICEDETAIL", Storage="_SERVICEDETAILs", ThisKey="ServicesID", OtherKey="ServicesID")]
		public EntitySet<SERVICEDETAIL> SERVICEDETAILs
		{
			get
			{
				return this._SERVICEDETAILs;
			}
			set
			{
				this._SERVICEDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UNIT_SERVICE", Storage="_UNIT", ThisKey="UnitID", OtherKey="UnitID", IsForeignKey=true)]
		public UNIT UNIT
		{
			get
			{
				return this._UNIT.Entity;
			}
			set
			{
				UNIT previousValue = this._UNIT.Entity;
				if (((previousValue != value) 
							|| (this._UNIT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UNIT.Entity = null;
						previousValue.SERVICEs.Remove(this);
					}
					this._UNIT.Entity = value;
					if ((value != null))
					{
						value.SERVICEs.Add(this);
						this._UnitID = value.UnitID;
					}
					else
					{
						this._UnitID = default(string);
					}
					this.SendPropertyChanged("UNIT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SERVICEDETAILs(SERVICEDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.SERVICE = this;
		}
		
		private void detach_SERVICEDETAILs(SERVICEDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.SERVICE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SERVICESTYPE")]
	public partial class SERVICESTYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ServicesTypeID;
		
		private string _ServicesTypeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServicesTypeIDChanging(string value);
    partial void OnServicesTypeIDChanged();
    partial void OnServicesTypeNameChanging(string value);
    partial void OnServicesTypeNameChanged();
    #endregion
		
		public SERVICESTYPE()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicesTypeID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ServicesTypeID
		{
			get
			{
				return this._ServicesTypeID;
			}
			set
			{
				if ((this._ServicesTypeID != value))
				{
					this.OnServicesTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServicesTypeID = value;
					this.SendPropertyChanged("ServicesTypeID");
					this.OnServicesTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicesTypeName", DbType="NVarChar(100)")]
		public string ServicesTypeName
		{
			get
			{
				return this._ServicesTypeName;
			}
			set
			{
				if ((this._ServicesTypeName != value))
				{
					this.OnServicesTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ServicesTypeName = value;
					this.SendPropertyChanged("ServicesTypeName");
					this.OnServicesTypeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STAFF")]
	public partial class STAFF : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffID;
		
		private string _StaffName;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _PhoneNumber;
		
		private string _Address;
		
		private EntitySet<BILLDETAIL> _BILLDETAILs;
		
		private EntitySet<ORDER> _ORDERs;
		
		private EntitySet<PRICELIST> _PRICELISTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnStaffNameChanging(string value);
    partial void OnStaffNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public STAFF()
		{
			this._BILLDETAILs = new EntitySet<BILLDETAIL>(new Action<BILLDETAIL>(this.attach_BILLDETAILs), new Action<BILLDETAIL>(this.detach_BILLDETAILs));
			this._ORDERs = new EntitySet<ORDER>(new Action<ORDER>(this.attach_ORDERs), new Action<ORDER>(this.detach_ORDERs));
			this._PRICELISTs = new EntitySet<PRICELIST>(new Action<PRICELIST>(this.attach_PRICELISTs), new Action<PRICELIST>(this.detach_PRICELISTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffName", DbType="NVarChar(50)")]
		public string StaffName
		{
			get
			{
				return this._StaffName;
			}
			set
			{
				if ((this._StaffName != value))
				{
					this.OnStaffNameChanging(value);
					this.SendPropertyChanging();
					this._StaffName = value;
					this.SendPropertyChanged("StaffName");
					this.OnStaffNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NChar(11)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_BILLDETAIL", Storage="_BILLDETAILs", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<BILLDETAIL> BILLDETAILs
		{
			get
			{
				return this._BILLDETAILs;
			}
			set
			{
				this._BILLDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_ORDER", Storage="_ORDERs", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<ORDER> ORDERs
		{
			get
			{
				return this._ORDERs;
			}
			set
			{
				this._ORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_PRICELIST", Storage="_PRICELISTs", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<PRICELIST> PRICELISTs
		{
			get
			{
				return this._PRICELISTs;
			}
			set
			{
				this._PRICELISTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BILLDETAILs(BILLDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = this;
		}
		
		private void detach_BILLDETAILs(BILLDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = null;
		}
		
		private void attach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = this;
		}
		
		private void detach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = null;
		}
		
		private void attach_PRICELISTs(PRICELIST entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = this;
		}
		
		private void detach_PRICELISTs(PRICELIST entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STATUS")]
	public partial class STATUS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StatusID;
		
		private string _StatusName;
		
		private EntitySet<ROOM> _ROOMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(string value);
    partial void OnStatusIDChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    #endregion
		
		public STATUS()
		{
			this._ROOMs = new EntitySet<ROOM>(new Action<ROOM>(this.attach_ROOMs), new Action<ROOM>(this.detach_ROOMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="NVarChar(20)")]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATUS_ROOM", Storage="_ROOMs", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<ROOM> ROOMs
		{
			get
			{
				return this._ROOMs;
			}
			set
			{
				this._ROOMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ROOMs(ROOM entity)
		{
			this.SendPropertyChanging();
			entity.STATUS = this;
		}
		
		private void detach_ROOMs(ROOM entity)
		{
			this.SendPropertyChanging();
			entity.STATUS = null;
		}
	}
}
#pragma warning restore 1591
